<!---->
<launch>
  <!-- include gazebo world -->
  <!-- these are the arguments you can pass this launch file, for example paused:=true -->
  <arg name="paused" default="true"/>
  <arg name="use_sim_time" default="true"/>
  <arg name="gui" default="true"/>
  <arg name="headless" default="false"/>
  <arg name="debug" default="false"/>

  <!-- We resume the logic in empty_world.launch -->
  <arg name="world_file"  value="$(find IRL_learning_ros)/worlds/obstacle.world"/>  
  <include file="$(find gazebo_ros)/launch/empty_world.launch">
    <arg name="debug" value="$(arg debug)" />
    <arg name="gui" value="$(arg gui)" />
    <arg name="paused" value="$(arg paused)"/>
    <arg name="use_sim_time" value="$(arg use_sim_time)"/>
    <arg name="headless" value="$(arg headless)"/>
    <arg name="world_name" value="$(arg world_file)"/>
  </include>

  <!-- include spec of agent -->
  <include file="$(find IRL_learning_ros)/launch/includes/kobuki_rplidar.launch.xml"/>

  <!-- include Deep Q-learning Network simulation -->
  <include file="$(find IRL_learning_ros)/launch/includes/deepQlearning.launch"/>


  <!-- Spawn cylinder(slave) 
  <node name="spawn_urdf" pkg="gazebo_ros" type="spawn_model" args="-file $(find mobile_robot_sim)/urdf/slave_cylinder.urdf -urdf -x 1 -y 1 -model slave" />-->

  <!-- run nodes -->
  <node pkg="robot_state_publisher" type="robot_state_publisher" name="robot_state_publisher">
    <param name="publish_frequency" type="double" value="30.0" /> 
  </node> 
  <node pkg="IRL_learning_ros" type="agent_state_publisher.py" name="agent_state_publisher" output="screen">>
  </node>

</launch>
